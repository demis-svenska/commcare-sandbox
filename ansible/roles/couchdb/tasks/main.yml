# CouchDB
- name: Install CouchDB prequisites
  apt: name="{{ item }}" state=present
  with_items:
    - build-essential
    - g++
    - erlang-base
    - erlang-dev
    - erlang-eunit
    - erlang-nox
    - libmozjs185-dev
    - libicu-dev
    - libcurl4-gnutls-dev
    - libtool

- name: Install couchdb pip packages
  pip: name="{{ item }}"
  sudo: yes
  with_items:
    - urllib3
    - pyopenssl
    - ndg-httpsclient
    - pyasn1

- name: Check CouchDB existence
  stat: path="{{ couchdb_install_path }}"
  register: couchdb_path

- name: Download CouchDB source
  sudo: no
  get_url:
    url: "{{ couchdb_source_mirror }}/{{ couchdb_version }}/{{ couchdb_distro_filename }}"
    dest: "~/{{ couchdb_distro_filename }}"
  when: not couchdb_path.stat.exists

# Note 'chdir: ~/' evaluates to /home/<ansible_user> or to /root/ depending on whether `sudo` is set to 'no' or 'yes'
- name: Compile CouchDB
  shell: "{{ item }}"
  args:
    chdir: ~/
  sudo: no
  with_items:
    - tar xvf ~/{{ couchdb_distro_filename }}
    - cd apache-couchdb-{{ couchdb_version }} && ./configure
    - make -C ~/apache-couchdb-{{ couchdb_version }}
  when: not couchdb_path.stat.exists
  register: couchdb_compile

- stat: path=~/
  sudo: no
  register: ansible_home_path

- name: Install CouchDB
  shell: "{{ item }}"
  args:
    chdir: "{{ ansible_home_path.stat.path }}"
  sudo: yes
  with_items:
    - make install -C ./apache-couchdb-{{ couchdb_version }}
    - rm -rf ./apache-couchdb-{{ couchdb_version }}*
  when: not couchdb_path.stat.exists and couchdb_compile|success

- name: Add CouchDB user
  user: name=couchdb createhome=no password=no state=present

- name: Apply CouchDB config
  template: src=local.ini.j2 dest=/usr/local/etc/couchdb/local.ini
  register: update_config

- name: CouchDB ownership permissions
  file: path="{{ item }}" owner=couchdb recurse=yes state=directory
  with_items:
    - "{{ couch_log_dir }}"
    - /usr/local/var/lib/couchdb
    - /usr/local/var/run/couchdb
    - /usr/local/etc/couchdb/
    - '{{ couch_data_dir }}'

- name: Configure CouchDB as service
  file: src=/usr/local/etc/init.d/couchdb dest=/etc/init.d/couchdb state=link

- name: Update rc.d
  shell: update-rc.d couchdb defaults

- name: Start CouchDB service
  service: name=couchdb state=started
  tags: after-reboot

- name: Check CouchDB database
  uri:
    url: "http{% if item.is_https %}s{% endif %}://{{ item.host }}:{{ item.port }}/{{ item.name }}"
    status_code: 200, 404
  register: couch_response
  when: (item.host == inventory_hostname) or is_monolith|bool
  with_items: "{{ couch_dbs.values() }}"

- name: Add CouchDB database
  uri:
    url: "http{% if item.item.is_https %}s{% endif %}://{{ item.item.host }}:{{ item.item.port }}/{{ item.item.name }}"
    method: PUT
    status_code: 201
  when: not item.skipped|default(false) and item.status == 404
  with_items: "{{ couch_response.results }}"

# TD thinks that only the first one should run here, since the second would be
# creating a user with the same username/password.
# TASK [couchdb : Set CouchDB username and password] *****************************
# ok: [165.227.172.214] => (item={u'username': u'commcarehq', u'name': u'commcarehq', u'is_https': False, u'host': u'165.227.172.214', u'password': u'commcarehq', u'port': 5984})
# failed: [165.227.172.214] (item={u'username': u'commcarehq', u'name': u'commcarehq__users', u'is_https': False, u'host': u'165.227.172.214', u'password': u'commcarehq', u'port': 5984}) => {"cache_control": "must-revalidate", "content": "{\"error\":\"unauthorized\",\"reason\":\"You are not a server admin.\"}\n", "content_length": "64", "content_type": "text/plain; charset=utf-8", "date": "Thu, 05 Oct 2017 11:10:34 GMT", "failed": true, "item": {"host": "165.227.172.214", "is_https": false, "name": "commcarehq__users", "password": "commcarehq", "port": 5984, "username": "commcarehq"}, "msg": "Status code was not [200]: HTTP Error 401: Unauthorized", "redirected": false, "server": "CouchDB/1.6.1 (Erlang OTP/R16B03)", "status": 401, "url": "http://165.227.172.214:5984/_config/admins/commcarehq"}
# 	to retry, use: --limit @/vagrant/ansible/deploy_stack.retry
#
# PLAY RECAP *********************************************************************
# 165.227.172.214            : ok=135  changed=90   unreachable=0    failed=1
#
- name: Set CouchDB username and password
  uri:
    # url: "http{% if item.is_https %}s{% endif %}://{{ item.username }}:{{ item.password }}@{{ item.host }}:{{ item.port }}/_config/admins/{{ item.username }}"
    url: "http{% if item.is_https %}s{% endif %}://{{ item.host }}:{{ item.port }}/_config/admins/{{ item.username }}"
    method: PUT
    status_code: 200
    body: '"{{ item.password }}"'
    body_format: raw
  when: update_config|changed and ((item.host == inventory_hostname) or is_monolith|bool)
  with_items: "{{ couch_dbs.values() }}"

- name: Copy couch restart script
  sudo: yes
  template:
    src: "couch-restarter.sh.j2"
    dest: "/usr/local/sbin/couch-restarter.sh"
    group: root
    owner: root
    mode: 0700
    backup: yes
  tags:
    - cron

- name: Create Cron job
  sudo: yes
  cron:
    name: "Reboot Couch"
    job: "/usr/local/sbin/couch-restarter.sh > /dev/null"
    user: root
    cron_file: couch-restarter
  tags:
    - cron

- name: Copy couch backup script
  sudo: yes
  template:
    src: "create_couchdb_backup.sh.j2"
    dest: "/usr/local/sbin/create_couchdb_backup.sh"
    group: couchdb
    owner: couchdb
    mode: 0700
    backup: yes
  when: backup_couch
  tags:
    - cron
    - backup

- name: Create Daily Cron job
  sudo: yes
  cron:
    name: "Backup blobdb daily"
    job: "/usr/local/sbin/create_couchdb_backup.sh daily 3"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: "1,2,3,4,5,6"
    user: couchdb
    cron_file: backup_couch
  when: backup_couch
  tags:
    - cron

- name: Create Weekly Cron job
  sudo: yes
  cron:
    name: "Backup blobdb weekly"
    job: "/usr/local/sbin/create_couchdb_backup.sh weekly 21"
    minute: 0
    hour: "{{ nadir_hour|default(0) }}"
    weekday: 0
    user: couchdb
    cron_file: backup_couch
  when: backup_couch
  tags:
    - cron
    - backup
